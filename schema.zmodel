// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

plugin prisma {
  provider = '@core/prisma'
  format = true
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/prisma/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

attribute @DtoReadOnly()
attribute @DtoCreateHidden()
attribute @DtoUpdateHidden()
attribute @DtoEntityHidden()
attribute @DtoApiHidden()
attribute @DtoCreateOptional()
attribute @DtoUpdateOptional()
attribute @DtoRelationRequired()
attribute @DtoRelationCanCreateOnCreate()
attribute @DtoRelationCanConnectOnCreate()
attribute @DtoRelationCanCreateOnUpdate()
attribute @DtoRelationCanConnectOnUpdate()
attribute @DtoRelationCanDisconnectOnUpdate()
attribute @DtoRelationIncludeId()
attribute @DtoTypeFullUpdate()

enum Role {
  ADMIN
  USER
}

model User {
  id        String      @id @default(uuid()) @DtoCreateOptional()
  email     String   @unique
  fullName      String
  role      Role       @default(USER) @DtoCreateOptional()
  phoneNumber String
  stickyReminder Boolean @default(false) @DtoCreateOptional() @DtoUpdateOptional()
  isVerified Boolean @default(false) @DtoReadOnly()
  createdAt DateTime @default(now()) @DtoReadOnly()
  updatedAt DateTime @updatedAt @DtoReadOnly()
  deletedAt DateTime? @DtoReadOnly()
	medications Medication[]
  inrTests InrTest[]
  scores WellnessScore[]
  incentives Incentive[]
  redeems Redeem[]

  @@deny('read', deletedAt != null)
  @@allow('all', auth().id == id || auth().role == "ADMIN")
}

enum Frequency {
  DAILY
  SPECIFIC_DAYS
  DAYS_INTERVAL
  AS_NEEDED
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Medication {
  id       String      @id @default(uuid())
  name     String
  frequency Frequency
  specificDays Day[]
  intervalCount    Int?
  intervalUnit     String?
  startDate DateTime @db.Date
  userId   String
  user     User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @DtoReadOnly()
  updatedAt DateTime @updatedAt @DtoReadOnly()
  deletedAt DateTime? @DtoReadOnly()
	reminders Reminder[]

  @@deny('read', deletedAt != null)
  @@allow('all', auth().id == userId)
}

model Reminder {
  id      String      @id @default(uuid())
  title   String
  description String?
  acknowledgedAt DateTime?
  status  Boolean?
  remindAt DateTime
  medicationId String @DtoRelationIncludeId()
  medication Medication @relation(fields: [medicationId], references: [id])
  createdAt DateTime @default(now()) @DtoReadOnly()
  updatedAt DateTime @updatedAt @DtoReadOnly()
  deletedAt DateTime? @DtoReadOnly()

  @@deny('read', deletedAt != null)
  @@allow('all', auth().id == medication.userId)
}

model InrTest {
  id      String      @id @default(uuid())
  inrValue Float
  remarks String?
  date    DateTime @db.Date
  verificationImage   String?
  userId  String
  user    User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @DtoReadOnly()
  updatedAt DateTime @updatedAt @DtoReadOnly()
  deletedAt DateTime? @DtoReadOnly()

  @@deny('read', deletedAt != null)
  @@allow('all', auth().id == userId)
}

model WellnessScore {
  id      String      @id @default(uuid())
  score   Float
  remarks String?
  date    DateTime @db.Date
  userId  String
  user    User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @DtoReadOnly()
  updatedAt DateTime @updatedAt @DtoReadOnly()
  deletedAt DateTime? @DtoReadOnly()

  @@deny('read', deletedAt != null)
  @@allow('all', auth().id == userId)
}

model Incentive {
  id      String      @id @default(uuid())
  amount Float
  isRedeemed Boolean @default(false)
  redeemedAmount Float?
  userId  String
  user    User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @DtoReadOnly()
  updatedAt DateTime @updatedAt @DtoReadOnly()
  deletedAt DateTime? @DtoReadOnly()
	redeems IncentivesOnRedeems[]

  @@deny('read', deletedAt != null)
  @@allow('all', auth().id == userId)

}

enum RedeemMethod {
  GIFTCARD
}

enum GiftCardType {
  AMAZON
  WALMART
  TARGET
  OTHER
}

model Redeem {
  id      String      @id @default(uuid())
  amount Float
  method  RedeemMethod
  giftCardType GiftCardType?
  giftCardCode String?
  processedAt DateTime?
  userId  String
  user    User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @DtoReadOnly()
  updatedAt DateTime @updatedAt @DtoReadOnly()
  deletedAt DateTime? @DtoReadOnly()
	incentives IncentivesOnRedeems[]

  @@deny('read', deletedAt != null)
  @@allow('all', auth().id == userId)

}

model IncentivesOnRedeems {
  incentiveId String
  redeemId    String
  incentive   Incentive @relation(fields: [incentiveId], references: [id])
  redeem      Redeem @relation(fields: [redeemId], references: [id])

  @@id([incentiveId, redeemId])
}