//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/prisma/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

enum Role {
  ADMIN
  USER
}

enum Frequency {
  DAILY
  SPECIFIC_DAYS
  DAYS_INTERVAL
  AS_NEEDED
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum IntervalUnit {
  DAY
  WEEK
  MONTH
}

enum RedeemMethod {
  GIFTCARD
}

enum Platform {
  IOS
  ANDROID
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == id || auth().role == 'ADMIN')
model User {
  /// @DtoCreateOptional
  id               String            @id() @default(uuid())
  email            String            @unique()
  fullName         String
  /// @DtoReadOnly
  role             Role              @default(USER)
  phoneNumber      String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  stickyReminder   Boolean           @default(false)
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  timeZone         String            @default("America/New_York")
  /// @DtoReadOnly
  isVerified       Boolean           @default(false)
  /// @DtoReadOnly
  createdAt        DateTime          @default(now())
  /// @DtoReadOnly
  updatedAt        DateTime          @updatedAt()
  /// @DtoReadOnly
  deletedAt        DateTime?
  /// @DtoEntityHidden
  medications      Medication[]
  /// @DtoEntityHidden
  inrTests         InrTest[]
  /// @DtoEntityHidden
  scores           WellnessScore[]
  /// @DtoEntityHidden
  incentives       Incentive[]
  /// @DtoEntityHidden
  redeems          Redeem[]
  callbackRequests CallbackRequest[]
  pushTokens       PushToken[]
  notifications    Notification[]
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId || auth().role == 'ADMIN')
model Medication {
  id            String        @id() @default(uuid())
  name          String
  dosage        String?
  noOfPills     Int
  frequency     Frequency
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  specificDays  Day[]
  intervalCount Int?
  intervalUnit  IntervalUnit?
  startDate     DateTime      @db.Date()
  time          DateTime      @db.Time()
  /// @DtoRelationIncludeId
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt     DateTime      @default(now())
  /// @DtoReadOnly
  updatedAt     DateTime      @updatedAt()
  /// @DtoReadOnly
  deletedAt     DateTime?
  /// @DtoEntityHidden
  reminders     Reminder[]
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == medication.userId || auth().role == 'ADMIN')
model Reminder {
  id             String     @id() @default(uuid())
  title          String
  description    String?
  acknowledgedAt DateTime?
  status         Boolean?
  remindAt       DateTime
  /// @DtoRelationIncludeId
  medicationId   String
  medication     Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt      DateTime   @default(now())
  /// @DtoReadOnly
  updatedAt      DateTime   @updatedAt()
  /// @DtoReadOnly
  deletedAt      DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId || auth().role == 'ADMIN')
model InrTest {
  id                String    @id() @default(uuid())
  inrValue          Float
  remarks           String?
  date              DateTime  @db.Date()
  verificationImage String?
  /// @DtoRelationIncludeId
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt         DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt         DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt         DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId || auth().role == 'ADMIN')
model WellnessScore {
  id        String    @id() @default(uuid())
  score     Float
  remarks   String?
  date      DateTime  @db.Date()
  /// @DtoRelationIncludeId
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId || auth().role == 'ADMIN')
model Incentive {
  id             String                @id() @default(uuid())
  amount         Float
  isRedeemed     Boolean               @default(false)
  redeemedAmount Float                 @default(0)
  /// @DtoRelationIncludeId
  userId         String
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt      DateTime              @default(now())
  /// @DtoReadOnly
  updatedAt      DateTime              @updatedAt()
  /// @DtoReadOnly
  deletedAt      DateTime?
  /// @DtoEntityHidden
  redeems        IncentivesOnRedeems[]
}

/// @@deny('read', deletedAt != null)
/// @@allow('read', true)
/// @@allow('all', auth().role == 'ADMIN')
model GiftCardType {
  id        String    @id() @default(uuid())
  name      String
  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt DateTime?
  redeems   Redeem[]
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId || auth().role == 'ADMIN')
model Redeem {
  id             String                @id() @default(uuid())
  amount         Float
  method         RedeemMethod
  /// @DtoRelationIncludeId
  giftCardTypeId String?
  giftCardType   GiftCardType?         @relation(fields: [giftCardTypeId], references: [id], onDelete: SetNull)
  giftCardCode   String?
  processedAt    DateTime?
  expiryAt       DateTime?
  /// @DtoRelationIncludeId
  userId         String
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt      DateTime              @default(now())
  /// @DtoReadOnly
  updatedAt      DateTime              @updatedAt()
  /// @DtoReadOnly
  deletedAt      DateTime?
  /// @DtoEntityHidden
  incentives     IncentivesOnRedeems[]
}

/// @@allow('all', auth().id == incentive.userId && auth().id == redeem.userId || auth().role == 'ADMIN')
model IncentivesOnRedeems {
  incentiveId String
  redeemId    String
  incentive   Incentive @relation(fields: [incentiveId], references: [id], onDelete: Cascade)
  redeem      Redeem    @relation(fields: [redeemId], references: [id], onDelete: Cascade)

  @@id([incentiveId, redeemId])
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId || auth().role == 'ADMIN')
model CallbackRequest {
  id         String    @id() @default(uuid())
  /// @DtoRelationIncludeId
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  isResolved Boolean   @default(false)
  /// @DtoReadOnly
  createdAt  DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt  DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt  DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().role == 'ADMIN' || auth().role == 'ADMIN')
model ContactRequest {
  id          String    @id() @default(uuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String?
  message     String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  isResolved  Boolean   @default(false)
  /// @DtoReadOnly
  createdAt   DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt   DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt   DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth() == user || auth().role == 'ADMIN')
model PushToken {
  id         String    @id() @default(uuid())
  token      String
  apnToken   String?
  device     String
  platform   Platform
  identifier String
  /// @DtoRelationIncludeId
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt  DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt  DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt  DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth() == user || auth().role == 'ADMIN')
model Notification {
  id        String    @id() @default(uuid())
  title     String
  body      String
  data      Json?
  /// @DtoRelationIncludeId
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt DateTime?
}
