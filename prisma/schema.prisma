//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/prisma/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

enum Role {
  ADMIN
  USER
}

enum Frequency {
  DAILY
  SPECIFIC_DAYS
  DAYS_INTERVAL
  AS_NEEDED
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum RedeemMethod {
  GIFTCARD
}

enum GiftCardType {
  AMAZON
  WALMART
  TARGET
  OTHER
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == id || auth().role == 'ADMIN')
model User {
  /// @DtoCreateOptional
  id             String          @id() @default(uuid())
  email          String          @unique()
  fullName       String
  /// @DtoCreateOptional
  role           Role            @default(USER)
  phoneNumber    String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  stickyReminder Boolean         @default(false)
  /// @DtoReadOnly
  isVerified     Boolean         @default(false)
  /// @DtoReadOnly
  createdAt      DateTime        @default(now())
  /// @DtoReadOnly
  updatedAt      DateTime        @updatedAt()
  /// @DtoReadOnly
  deletedAt      DateTime?
  medications    Medication[]
  inrTests       InrTest[]
  scores         WellnessScore[]
  incentives     Incentive[]
  redeems        Redeem[]
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId)
model Medication {
  id            String     @id() @default(uuid())
  name          String
  frequency     Frequency
  specificDays  Day[]
  intervalCount Int?
  intervalUnit  String?
  startDate     DateTime   @db.Date()
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  /// @DtoReadOnly
  createdAt     DateTime   @default(now())
  /// @DtoReadOnly
  updatedAt     DateTime   @updatedAt()
  /// @DtoReadOnly
  deletedAt     DateTime?
  reminders     Reminder[]
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == medication.userId)
model Reminder {
  id             String     @id() @default(uuid())
  title          String
  description    String?
  acknowledgedAt DateTime?
  status         Boolean?
  remindAt       DateTime
  /// @DtoRelationIncludeId
  medicationId   String
  medication     Medication @relation(fields: [medicationId], references: [id])
  /// @DtoReadOnly
  createdAt      DateTime   @default(now())
  /// @DtoReadOnly
  updatedAt      DateTime   @updatedAt()
  /// @DtoReadOnly
  deletedAt      DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId)
model InrTest {
  id                String    @id() @default(uuid())
  inrValue          Float
  remarks           String?
  date              DateTime  @db.Date()
  verificationImage String?
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  /// @DtoReadOnly
  createdAt         DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt         DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt         DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId)
model WellnessScore {
  id        String    @id() @default(uuid())
  score     Float
  remarks   String?
  date      DateTime  @db.Date()
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt()
  /// @DtoReadOnly
  deletedAt DateTime?
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId)
model Incentive {
  id             String                @id() @default(uuid())
  amount         Float
  isRedeemed     Boolean               @default(false)
  redeemedAmount Float?
  userId         String
  user           User                  @relation(fields: [userId], references: [id])
  /// @DtoReadOnly
  createdAt      DateTime              @default(now())
  /// @DtoReadOnly
  updatedAt      DateTime              @updatedAt()
  /// @DtoReadOnly
  deletedAt      DateTime?
  redeems        IncentivesOnRedeems[]
}

/// @@deny('read', deletedAt != null)
/// @@allow('all', auth().id == userId)
model Redeem {
  id           String                @id() @default(uuid())
  amount       Float
  method       RedeemMethod
  giftCardType GiftCardType?
  giftCardCode String?
  processedAt  DateTime?
  userId       String
  user         User                  @relation(fields: [userId], references: [id])
  /// @DtoReadOnly
  createdAt    DateTime              @default(now())
  /// @DtoReadOnly
  updatedAt    DateTime              @updatedAt()
  /// @DtoReadOnly
  deletedAt    DateTime?
  incentives   IncentivesOnRedeems[]
}

model IncentivesOnRedeems {
  incentiveId String
  redeemId    String
  incentive   Incentive @relation(fields: [incentiveId], references: [id])
  redeem      Redeem    @relation(fields: [redeemId], references: [id])

  @@id([incentiveId, redeemId])
}
